import requests
import string

def token_at_index_return(arr):
	k = []
	for i in range(0,len(arr),32):
		k.append(arr[i:i+32])
	return k

def attack():
	s = requests.session()
	block_gap = 31
	known = ''

	try:
		while 1:
			print("Known: ", known)
			# username = ';W!"T44NcWmrx]<' 
			username =  'A' * (block_gap)
			x = s.post('http://challenge.acictf.com:48438/register', data={'username': username, 'password': '123'})
			should_be = token_at_index_return(x.cookies['auth_token'])[1]
			print("NEW SHOULD BE ", token_at_index_return(x.cookies['auth_token']))		
			for c in string.printable:
				username = "A" * (block_gap) + known + c 
				x = s.post('http://challenge.acictf.com:48438/register', data={'username': username, 'password': '123'})
				ck = x.cookies['auth_token']
				idk = token_at_index_return(ck)
				print("IDK", idk)
				idk = idk[1]
				print("[*] Trying {}, username: {}, block_gap: {}".format(c, username, block_gap))
				if idk == should_be:
					known =  known + c
					block_gap -= 1

					print("[!] Token: {} Char: {} Known data: {}".format(idk, c, known))
					print("[*] New should_be block {}".format(should_be))
					s.close()
					break	
	except:
		pass


if __name__ == '__main__':
	attack()

